{"ast":null,"code":"import _defineProperty from \"/Users/godambe/dhruv1584/MainEthereum/basicdapp/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/godambe/dhruv1584/MainEthereum/basicdapp/client/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport Web3 from 'web3';\nimport \"./App.css\";\n\nvar Tx = require('ethereumjs-tx').Transaction;\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      console.log(Tx);\n\n      try {\n        // Get network provider and web3 instance.\n        const web3 = new Web3('http://127.0.0.1:7545');\n        console.log(web3.utils); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(this.state.change || 4).send({\n        from: accounts[1]\n      });\n      console.log(\"accounts: \", accounts); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Get the value from the contract to prove it worked.\n\n      const respons = await contract.methods.set(40).call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.createWallet = async () => {\n      const newAddress = this.state.web3.eth.accounts.create();\n      console.log(newAddress);\n      this.setState(_objectSpread({}, this.state, {\n        account: newAddress\n      }));\n    };\n\n    this.transact = async () => {\n      this.state.web3.eth.getTransactionCount('0x38C041B9560d9B7dC299583C25efBBE317e1475a').then(count => {\n        const txObject = {\n          nonce: this.state.web3.utils.toHex(count),\n          to: '0x24a5D829Eb8fdfef3CEe953cA9310805571a7408',\n          value: this.state.web3.utils.toHex(this.state.web3.utils.toWei(this.state.transact.value.toString(), 'ether')),\n          gasLimit: this.state.web3.utils.toHex(21000),\n          gasPrice: this.state.web3.utils.toHex(this.state.web3.utils.toWei('10', 'gwei'))\n        };\n        const tx = new Tx(txObject);\n        tx.sign('0635bdeac2b22da46e9887f60b0332b447cd0982abe5dc3796b9765785ad1ef6');\n        const serializedTransaction = tx.serialize();\n        const raw = '0x' + serializedTransaction.toString('hex');\n        this.state.web3.eth.sendSignedTransaction(raw, (err, txHash) => {\n          console.log('txHash: ', txHash);\n        });\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Ethereum Wallet\"), React.createElement(\"div\", {\n      className: \"parent-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Create an Account\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), this.state.account ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"your newly generated address: \", this.state.account.address), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"your private key for this address: \", this.state.account.privateKey)) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.createWallet,\n      className: \"container-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"create\"), React.createElement(\"p\", {\n      style: {\n        color: '#555',\n        fontSize: '17px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"It will generate a new address and a private key for your eth transactions\")), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Send Ether\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"From\",\n      style: {\n        fontSize: '20px',\n        padding: '5px',\n        minWidth: '435px',\n        maxWidth: '600px'\n      },\n      onChange: e => {\n        this.setState(_objectSpread({}, this.state, {\n          transact: _objectSpread({}, this.state.transact, {\n            from: e.target.value\n          })\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"To\",\n      style: {\n        fontSize: '20px',\n        padding: '5px',\n        minWidth: '435px',\n        maxWidth: '600px'\n      },\n      onChange: e => {\n        this.setState(_objectSpread({}, this.state, {\n          transact: _objectSpread({}, this.state.transact, {\n            to: e.target.value\n          })\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        margin: '10px 0'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Amount of ether\",\n      style: {\n        fontSize: '20px',\n        padding: '5px',\n        minWidth: '435px',\n        maxWidth: '600px'\n      },\n      onChange: e => {\n        this.setState(_objectSpread({}, this.state, {\n          transact: _objectSpread({}, this.state.transact, {\n            value: e.target.value\n          })\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: this.transact,\n      className: \"container-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"send\"), React.createElement(\"p\", {\n      style: {\n        color: '#555',\n        fontSize: '17px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"send ether to known addresses only!\"), this.state.transaction ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"transaction Successful\") : null));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/godambe/dhruv1584/MainEthereum/basicdapp/client/src/App.js"],"names":["React","Component","SimpleStorageContract","Web3","Tx","require","Transaction","App","state","storageValue","web3","accounts","contract","componentDidMount","console","log","utils","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","runExample","error","alert","methods","set","change","send","from","response","get","call","respons","createWallet","newAddress","create","account","transact","getTransactionCount","then","count","txObject","nonce","toHex","to","value","toWei","toString","gasLimit","gasPrice","tx","sign","serializedTransaction","serialize","raw","sendSignedTransaction","err","txHash","render","privateKey","color","fontSize","margin","padding","minWidth","maxWidth","e","target","transaction"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAO,WAAP;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBC,WAAlC;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BO,KAD0B,GAClB;AAAEC,MAAAA,YAAY,EAAE,CAAhB;AAAmBC,MAAAA,IAAI,EAAE,IAAzB;AAA+BC,MAAAA,QAAQ,EAAE,IAAzC;AAA+CC,MAAAA,QAAQ,EAAE;AAAzD,KADkB;;AAAA,SAG1BC,iBAH0B,GAGN,YAAY;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAYX,EAAZ;;AACA,UAAI;AACF;AACA,cAAMM,IAAI,GAAG,IAAIP,IAAJ,CAAS,uBAAT,CAAb;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,KAAjB,EAHE,CAIF;;AACA,cAAML,QAAQ,GAAG,MAAMD,IAAI,CAACO,GAAL,CAASC,WAAT,EAAvB,CALE,CAOF;;AACA,cAAMC,SAAS,GAAG,MAAMT,IAAI,CAACO,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACA,cAAMC,eAAe,GAAGpB,qBAAqB,CAACqB,QAAtB,CAA+BJ,SAA/B,CAAxB;AACA,cAAMK,QAAQ,GAAG,IAAId,IAAI,CAACO,GAAL,CAASQ,QAAb,CACfvB,qBAAqB,CAACwB,GADP,EAEfJ,eAAe,IAAIA,eAAe,CAACK,OAFpB,CAAjB,CAVE,CAeF;AACA;;AACA,aAAKC,QAAL,CAAc;AAAElB,UAAAA,IAAF;AAAQC,UAAAA,QAAR;AAAkBC,UAAAA,QAAQ,EAAEY;AAA5B,SAAd,EAAsD,KAAKK,UAA3D;AACD,OAlBD,CAkBE,OAAOC,KAAP,EAAc;AACd;AACAC,QAAAA,KAAK,0EAAL;AAGAjB,QAAAA,OAAO,CAACgB,KAAR,CAAcA,KAAd;AACD;AACF,KA9ByB;;AAAA,SAgC1BD,UAhC0B,GAgCb,YAAY;AAAA,0BACQ,KAAKrB,KADb;AAAA,YACfG,QADe,eACfA,QADe;AAAA,YACLC,QADK,eACLA,QADK,EAGvB;;AACA,YAAMA,QAAQ,CAACoB,OAAT,CAAiBC,GAAjB,CAAqB,KAAKzB,KAAL,CAAW0B,MAAX,IAAqB,CAA1C,EAA6CC,IAA7C,CAAkD;AAAEC,QAAAA,IAAI,EAAEzB,QAAQ,CAAC,CAAD;AAAhB,OAAlD,CAAN;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BJ,QAA1B,EALuB,CAOvB;;AACA,YAAM0B,QAAQ,GAAG,MAAMzB,QAAQ,CAACoB,OAAT,CAAiBM,GAAjB,GAAuBC,IAAvB,EAAvB,CARuB,CAUvB;;AACA,YAAMC,OAAO,GAAG,MAAM5B,QAAQ,CAACoB,OAAT,CAAiBC,GAAjB,CAAqB,EAArB,EAAyBM,IAAzB,EAAtB,CAXuB,CAavB;;AACA,WAAKX,QAAL,CAAc;AAAEnB,QAAAA,YAAY,EAAE4B;AAAhB,OAAd;AACD,KA/CyB;;AAAA,SAiD1BI,YAjD0B,GAiDX,YAAY;AACzB,YAAMC,UAAU,GAAG,KAAKlC,KAAL,CAAWE,IAAX,CAAgBO,GAAhB,CAAoBN,QAApB,CAA6BgC,MAA7B,EAAnB;AACA7B,MAAAA,OAAO,CAACC,GAAR,CAAY2B,UAAZ;AACA,WAAKd,QAAL,mBAAkB,KAAKpB,KAAvB;AAA8BoC,QAAAA,OAAO,EAAEF;AAAvC;AACD,KArDyB;;AAAA,SAuD1BG,QAvD0B,GAuDf,YAAY;AACrB,WAAKrC,KAAL,CAAWE,IAAX,CAAgBO,GAAhB,CAAoB6B,mBAApB,CAAwC,4CAAxC,EACCC,IADD,CACOC,KAAD,IAAW;AACf,cAAMC,QAAQ,GAAG;AACfC,UAAAA,KAAK,EAAE,KAAK1C,KAAL,CAAWE,IAAX,CAAgBM,KAAhB,CAAsBmC,KAAtB,CAA4BH,KAA5B,CADQ;AAEfI,UAAAA,EAAE,EAAE,4CAFW;AAGfC,UAAAA,KAAK,EAAE,KAAK7C,KAAL,CAAWE,IAAX,CAAgBM,KAAhB,CAAsBmC,KAAtB,CAA4B,KAAK3C,KAAL,CAAWE,IAAX,CAAgBM,KAAhB,CAAsBsC,KAAtB,CAA4B,KAAK9C,KAAL,CAAWqC,QAAX,CAAoBQ,KAApB,CAA0BE,QAA1B,EAA5B,EAAkE,OAAlE,CAA5B,CAHQ;AAIfC,UAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWE,IAAX,CAAgBM,KAAhB,CAAsBmC,KAAtB,CAA4B,KAA5B,CAJK;AAKfM,UAAAA,QAAQ,EAAE,KAAKjD,KAAL,CAAWE,IAAX,CAAgBM,KAAhB,CAAsBmC,KAAtB,CAA4B,KAAK3C,KAAL,CAAWE,IAAX,CAAgBM,KAAhB,CAAsBsC,KAAtB,CAA4B,IAA5B,EAAkC,MAAlC,CAA5B;AALK,SAAjB;AAQA,cAAMI,EAAE,GAAG,IAAItD,EAAJ,CAAO6C,QAAP,CAAX;AACAS,QAAAA,EAAE,CAACC,IAAH,CAAQ,kEAAR;AAEA,cAAMC,qBAAqB,GAAGF,EAAE,CAACG,SAAH,EAA9B;AACA,cAAMC,GAAG,GAAG,OAAOF,qBAAqB,CAACL,QAAtB,CAA+B,KAA/B,CAAnB;AAEA,aAAK/C,KAAL,CAAWE,IAAX,CAAgBO,GAAhB,CAAoB8C,qBAApB,CAA0CD,GAA1C,EAA+C,CAACE,GAAD,EAAMC,MAAN,KAAiB;AAC9DnD,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBkD,MAAxB;AACD,SAFD;AAGD,OAnBD;AAoBD,KA5EyB;AAAA;;AA8E1BC,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAK1D,KAAL,CAAWE,IAAhB,EAAsB;AACpB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAAP;AACD;;AACD,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAIG,KAAKF,KAAL,CAAWoC,OAAX,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCAAkC,KAAKpC,KAAL,CAAWoC,OAAX,CAAmBjB,OAArD,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAAuC,KAAKnB,KAAL,CAAWoC,OAAX,CAAmBuB,UAA1D,CAFF,CADD,GAMC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,OAAO,EAAE,KAAK1B,YAAtB;AAAoC,MAAA,SAAS,EAAC,kBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAG,MAAA,KAAK,EAAE;AAAC2B,QAAAA,KAAK,EAAE,MAAR;AAAgBC,QAAAA,QAAQ,EAAE;AAA1B,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oFAFF,CAVJ,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAhBF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,EAkBE;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,WAAW,EAAC,MADd;AAEE,MAAA,KAAK,EAAE;AAACD,QAAAA,QAAQ,EAAE,MAAX;AAAmBE,QAAAA,OAAO,EAAE,KAA5B;AAAmCC,QAAAA,QAAQ,EAAE,OAA7C;AAAsDC,QAAAA,QAAQ,EAAE;AAAhE,OAFT;AAGE,MAAA,QAAQ,EAAGC,CAAD,IAAO;AACf,aAAK9C,QAAL,mBAAkB,KAAKpB,KAAvB;AAA8BqC,UAAAA,QAAQ,oBAAM,KAAKrC,KAAL,CAAWqC,QAAjB;AAA2BT,YAAAA,IAAI,EAAEsC,CAAC,CAACC,MAAF,CAAStB;AAA1C;AAAtC;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAlBF,EA2BE;AAAK,MAAA,KAAK,EAAE;AAACiB,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,WAAW,EAAC,IADd;AAEE,MAAA,KAAK,EAAE;AAACD,QAAAA,QAAQ,EAAE,MAAX;AAAmBE,QAAAA,OAAO,EAAE,KAA5B;AAAmCC,QAAAA,QAAQ,EAAE,OAA7C;AAAsDC,QAAAA,QAAQ,EAAE;AAAhE,OAFT;AAGE,MAAA,QAAQ,EAAGC,CAAD,IAAO;AACf,aAAK9C,QAAL,mBAAkB,KAAKpB,KAAvB;AAA8BqC,UAAAA,QAAQ,oBAAM,KAAKrC,KAAL,CAAWqC,QAAjB;AAA2BO,YAAAA,EAAE,EAAEsB,CAAC,CAACC,MAAF,CAAStB;AAAxC;AAAtC;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA3BF,EAoCE;AAAK,MAAA,KAAK,EAAE;AAACiB,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,WAAW,EAAC,iBADd;AAEE,MAAA,KAAK,EAAE;AAACD,QAAAA,QAAQ,EAAE,MAAX;AAAmBE,QAAAA,OAAO,EAAE,KAA5B;AAAmCC,QAAAA,QAAQ,EAAE,OAA7C;AAAsDC,QAAAA,QAAQ,EAAE;AAAhE,OAFT;AAGE,MAAA,QAAQ,EAAGC,CAAD,IAAO;AACf,aAAK9C,QAAL,mBAAkB,KAAKpB,KAAvB;AAA8BqC,UAAAA,QAAQ,oBAAM,KAAKrC,KAAL,CAAWqC,QAAjB;AAA2BQ,YAAAA,KAAK,EAAEqB,CAAC,CAACC,MAAF,CAAStB;AAA3C;AAAtC;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CApCF,EA6CE;AAAQ,MAAA,OAAO,EAAE,KAAKR,QAAtB;AAAgC,MAAA,SAAS,EAAC,kBAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA7CF,EA8CE;AAAG,MAAA,KAAK,EAAE;AAACuB,QAAAA,KAAK,EAAE,MAAR;AAAgBC,QAAAA,QAAQ,EAAE;AAA1B,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CA9CF,EA+CG,KAAK7D,KAAL,CAAWoE,WAAX,GAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAzB,GAA2D,IA/C9D,CAFF,CADF;AAsDD;;AAxIyB;;AA2I5B,eAAerE,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport Web3 from 'web3';\nimport \"./App.css\";\n\nvar Tx = require('ethereumjs-tx').Transaction\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    console.log(Tx)\n    try {\n      // Get network provider and web3 instance.\n      const web3 = new Web3('http://127.0.0.1:7545');\n      console.log(web3.utils)\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(this.state.change || 4).send({ from: accounts[1] });\n    console.log(\"accounts: \", accounts)\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Get the value from the contract to prove it worked.\n    const respons = await contract.methods.set(40).call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  createWallet = async () => {\n    const newAddress = this.state.web3.eth.accounts.create();\n    console.log(newAddress)\n    this.setState({...this.state, account: newAddress})\n  }\n\n  transact = async () => {\n    this.state.web3.eth.getTransactionCount('0x38C041B9560d9B7dC299583C25efBBE317e1475a')\n    .then((count) => {\n      const txObject = {\n        nonce: this.state.web3.utils.toHex(count),\n        to: '0x24a5D829Eb8fdfef3CEe953cA9310805571a7408',\n        value: this.state.web3.utils.toHex(this.state.web3.utils.toWei(this.state.transact.value.toString(), 'ether')),\n        gasLimit: this.state.web3.utils.toHex(21000),\n        gasPrice: this.state.web3.utils.toHex(this.state.web3.utils.toWei('10', 'gwei')),\n      }\n      \n      const tx = new Tx(txObject)\n      tx.sign('0635bdeac2b22da46e9887f60b0332b447cd0982abe5dc3796b9765785ad1ef6')\n\n      const serializedTransaction = tx.serialize()\n      const raw = '0x' + serializedTransaction.toString('hex')\n\n      this.state.web3.eth.sendSignedTransaction(raw, (err, txHash) => {\n        console.log('txHash: ', txHash)\n      })\n    })\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Ethereum Wallet</h1>\n        <div className='parent-container'>\n          <h2>Create an Account</h2>\n          <hr/>\n\n          {this.state.account ? \n            <div>\n              <p>your newly generated address: {this.state.account.address}</p>\n              <p>your private key for this address: {this.state.account.privateKey}</p>\n            </div>\n            :\n            <div>\n              <button onClick={this.createWallet} className='container-button'>create</button>\n              <p style={{color: '#555', fontSize: '17px'}}>It will generate a new address and a private key for your eth transactions</p>\n            </div>\n          }\n\n          <h2>Send Ether</h2>\n          <hr/>\n          <div style={{margin: '10px 0'}}>\n            <input\n              placeholder='From'\n              style={{fontSize: '20px', padding: '5px', minWidth: '435px', maxWidth: '600px'}}\n              onChange={(e) => {\n                this.setState({...this.state, transact: {...this.state.transact, from: e.target.value}})\n              }}\n              />\n          </div>\n          <div style={{margin: '10px 0'}}>\n            <input\n              placeholder='To'\n              style={{fontSize: '20px', padding: '5px', minWidth: '435px', maxWidth: '600px'}}\n              onChange={(e) => {\n                this.setState({...this.state, transact: {...this.state.transact, to: e.target.value}})\n              }}\n              />\n          </div>\n          <div style={{margin: '10px 0'}}>\n            <input\n              placeholder='Amount of ether'\n              style={{fontSize: '20px', padding: '5px', minWidth: '435px', maxWidth: '600px'}}\n              onChange={(e) => {\n                this.setState({...this.state, transact: {...this.state.transact, value: e.target.value}})\n              }}\n              />\n          </div>\n          <button onClick={this.transact} className='container-button'>send</button>\n          <p style={{color: '#555', fontSize: '17px'}}>send ether to known addresses only!</p>\n          {this.state.transaction ? <h1>transaction Successful</h1> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}