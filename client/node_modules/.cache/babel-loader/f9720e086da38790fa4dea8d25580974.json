{"ast":null,"code":"import _defineProperty from \"/Users/godambe/dhruv1584/MainEthereum/basicdapp/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/godambe/dhruv1584/MainEthereum/basicdapp/client/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport Web3 from 'web3';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = new Web3('http://127.0.0.1:7545');\n        console.log(web3.eth); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(this.state.change || 4).send({\n        from: accounts[1]\n      });\n      console.log(\"accounts: \", accounts); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Get the value from the contract to prove it worked.\n\n      const respons = await contract.methods.set(40).call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.transact = async () => {\n      this.state.web3.eth.sendTransaction({\n        \"from\": '0x38C041B9560d9B7dC299583C25efBBE317e1475a',\n        \"to\": '0x24a5D829Eb8fdfef3CEe953cA9310805571a7408',\n        \"value\": web3.toWei(1)\n      }, (e, r) => {\n        console.log(e, r);\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Good to Go!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Your Truffle Box is installed and ready.\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Smart Contract Example\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"If your contracts compiled and migrated successfully, below will show a stored value of 5 (by default).\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Try changing the value stored on \", React.createElement(\"strong\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"line 40\"), \" of App.js.\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"The stored value is: \", this.state.storageValue), React.createElement(\"input\", {\n      type: \"number\",\n      onChange: e => {\n        this.setState(_objectSpread({}, this.state, {\n          change: e.target.value\n        }));\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.runExample,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"again!\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.transact,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"transact!\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/godambe/dhruv1584/MainEthereum/basicdapp/client/src/App.js"],"names":["React","Component","SimpleStorageContract","Web3","App","state","storageValue","web3","accounts","contract","componentDidMount","console","log","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","runExample","error","alert","methods","set","change","send","from","response","get","call","respons","transact","sendTransaction","toWei","e","r","render","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport Web3 from 'web3';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = new Web3('http://127.0.0.1:7545');\n      console.log(web3.eth)\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(this.state.change || 4).send({ from: accounts[1] });\n    console.log(\"accounts: \", accounts)\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Get the value from the contract to prove it worked.\n    const respons = await contract.methods.set(40).call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  transact = async () => {\n    this.state.web3.eth.sendTransaction({\n      \"from\": '0x38C041B9560d9B7dC299583C25efBBE317e1475a',\n      \"to\": '0x24a5D829Eb8fdfef3CEe953cA9310805571a7408',\n      \"value\": web3.toWei(1),\n    }, (e,r) => {console.log(e,r)})\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 40</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div>\n        <input type=\"number\" onChange={(e) => {this.setState({...this.state, change: e.target.value})}} />\n        <button onClick={this.runExample}>again!</button>\n        <br/>\n        <button onClick={this.transact}>transact!</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}