{"ast":null,"code":"var _jsxFileName = \"/Users/godambe/dhruv1584/MainEthereum/basicdapp/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport Web3 from 'web3';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = new Web3('http://127.0.0.1:7545');\n        console.log(web3.utils); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = SimpleStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3,\n          accounts,\n          contract: instance\n        }, this.runExample);\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.runExample = async () => {\n      const _this$state = this.state,\n            accounts = _this$state.accounts,\n            contract = _this$state.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(this.state.change || 4).send({\n        from: accounts[1]\n      });\n      console.log(\"accounts: \", accounts); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Get the value from the contract to prove it worked.\n\n      const respons = await contract.methods.set(40).call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n\n    this.createWallet = async () => {\n      const newAddress = this.state.web3.eth.accounts.create();\n      console.log(newAddress);\n    };\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Ether Wallet\"), React.createElement(\"button\", {\n      onClick: this.createWallet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"create an account\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/godambe/dhruv1584/MainEthereum/basicdapp/client/src/App.js"],"names":["React","Component","SimpleStorageContract","Web3","App","state","storageValue","web3","accounts","contract","componentDidMount","console","log","utils","eth","getAccounts","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","setState","runExample","error","alert","methods","set","change","send","from","response","get","call","respons","createWallet","newAddress","create","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport Web3 from 'web3';\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = new Web3('http://127.0.0.1:7545');\n      console.log(web3.utils)\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(this.state.change || 4).send({ from: accounts[1] });\n    console.log(\"accounts: \", accounts)\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Get the value from the contract to prove it worked.\n    const respons = await contract.methods.set(40).call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  createWallet = async () => {\n    const newAddress = this.state.web3.eth.accounts.create();\n    console.log(newAddress)\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>Ether Wallet</h1>\n        <button onClick={this.createWallet}>create an account</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}